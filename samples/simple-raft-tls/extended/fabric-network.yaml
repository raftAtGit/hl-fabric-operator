apiVersion: hyperledger.org/v1alpha1
kind: FabricNetwork
metadata:
  name: simple-raft-tls
spec:

  # source of the configtx.yaml file. either a Kubernetes Secret or a file.
  configtx:
    file: configtx.yaml # see CLI for usage
    # secret: hlf-configtx.yaml

  chaincode:
    version: "2.0"
    language: node
    folder: ../../chaincode # see CLI for usage
    # configMaps: implied list

  # source of the genesis block. either a Kubernetes Secret or a file.
  # if none provided Fabric Operator will create the genesis block
  genesis: {}
    # file: # see CLI for usage
    # secret: hlf-genesis.block

  # source of the crypto materials. either a Kubernetes Secret or a folder.
  # if none provided Fabric Operator will create the crypto materials via cryptogen tool.
  # the secret contains TAR archived crypto material
  crypto-config: {}
    # folder: ./crypto-config
    # secret: hlf-crypto-config

  # adds additional DNS entries to /etc/hosts files of pods
  # this is provided for communication with external peers/orderers
  # if useActualDomains is true, Fabric Operator will still create internal hostAliases and append to this one
  hostAliases: 

  # topology of the Fabric network managed by Fabric Operator
  # also contains some top level properties which is applied to whole network
  topology:
    # Hyperledger Fabric Version
    version: 1.4.9  
    # TLS enabled?
    tlsEnabled: true
    # use actual domain names like peer0.atlantis.com instead of internal service names
    useActualDomains: true

    # Orderer and Peer organizations topology
    # crypto-config.yaml will be derived from this part
    ordererOrgs:
      - name: Pivt
        domain: pivt.nl
        hosts:
          - orderer0
    peerOrgs:
      - name: Karga
        domain: aptalkarga.tr
        peerCount: 1
      - name: Nevergreen
        domain: nevergreen.nl
        peerCount: 1
      - name: Atlantis
        domain: atlantis.com
        peerCount: 1
      - name: Valhalla
        domain: valhalla.asgard
        peerCount: 1
      - name: Cimmeria
        domain: cimmeria.hage
        peerCount: 1

  network:
    # used to create genesis block and by peer-org-flow to parse consortiums
    genesisProfile: OrdererGenesis
    # used to create genesis block 
    systemChannelID: testchainid

    # defines which organizations will join to which channels
    channels:
      - name: common
        # all peers in these organizations will join the channel
        orgs: [Karga, Nevergreen, Atlantis, Valhalla, Cimmeria]
      - name: private-karga-atlantis
        # all peers in these organizations will join the channel
        orgs: [Karga, Atlantis]
      - name: private-valhalla-cimmeria
        # all peers in these organizations will join the channel
        orgs: [Valhalla, Cimmeria]
      - name: private-karga-valhalla-cimmeria
        # all peers in these organizations will join the channel
        orgs: [Karga, Valhalla, Cimmeria]

    # defines which chaincodes will be installed to which organizations
    chaincodes:
      - name: very-simple
        # if defined, this will override the global chaincode.version value
        version: # "2.0" 
        # chaincode will be installed to all peers in these organizations
        orgs: [Karga, Nevergreen, Atlantis, Valhalla, Cimmeria]
        # at which channels are we instantiating/upgrading chaincode?
        channels:
        - name: common
          # chaincode will be instantiated/upgraded using the first peer in the first organization
          # chaincode will be invoked on all peers in these organizations
          orgs: [Karga, Nevergreen, Atlantis, Valhalla, Cimmeria]
          policy: OR('KargaMSP.member','NevergreenMSP.member','AtlantisMSP.member','ValhallaMSP.member','CimmeriaMSP.member')
          
      - name: even-simpler
        # if defined, this will override the global chaincode.language value
        language: golang
        orgs: [Karga, Atlantis,Valhalla, Cimmeria]
        channels:
        - name: private-karga-atlantis
          orgs: [Karga, Atlantis]
          policy: OR('KargaMSP.member','AtlantisMSP.member')
        - name: private-valhalla-cimmeria
          orgs: [Valhalla, Cimmeria]
          policy: OR('ValhallaMSP.member','CimmeriaMSP.member')
        - name: private-karga-valhalla-cimmeria
          orgs: [Karga, Valhalla, Cimmeria]
          policy: OR('KargaMSP.member','ValhallaMSP.member','CimmeriaMSP.member')

  # additional values passed to all Argo workflows
  argo:
    # service account to run all Argo worklow pods with
    serviceAccountName:

  # additional settings passed to relevant Helm charts
  # see each chart's values.yaml file for details
  hlf-kube: 
    peer:
      docker:
        dind: 
          # use a side car docker in docker container? required for Kubernetes versions 1.19+ 
          enabled: true
    # # persistence should be enabled if network will be extended for networks which depends on hostAliases (useActualDomains=true)
    # # otherwise, when hostAliases are updated, pods will restart and lose all the data
    #   persistence:
    #     enabled: true
    # orderer:
    #   persistence:
    #     enabled: true
    # couchdb:
    #   persistence:
    #     enabled: true    
  channel-flow: {}
  chaincode-flow: {}
  peer-org-flow: {}
  # backup-flow:
  # restore-flow:
